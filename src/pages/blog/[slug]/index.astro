---
import Layout from '../../../layouts/Layout.astro';
import {getEntryBySlug} from 'astro:content';
import {HumanTime} from '../../../components/human-time';
import {H2Tag, H3Tag, H4Tag, H5Tag, H6Tag} from '../../../components/headings';

const {slug} = Astro.params;

if (!slug) {
    return new Response(
        JSON.stringify({
            code: 'invalid slug',
            message: 'must provide a slug',
        }),
        {
            status: 400,
        },
    );
}

const post = await getEntryBySlug('posts', slug);

if (!post) {
    return new Response(undefined, {
        status: 404,
    });
}

const {Content, headings} = await post.render();

const contentsEnabled =
    post.data.contents === undefined ||
    post.data.contents === true ||
    (post.data.contents !== false &&
        (post.data.contents.enabled === undefined ||
            post.data.contents.enabled === true));

const contentsOpenByDefault =
    post.data.contents === undefined ||
    post.data.contents === true ||
    (post.data.contents !== false &&
        (post.data.contents.open === undefined ||
            post.data.contents.open === true));
---

<Layout
    title={`${post.data.pageTitle ?? post.data.title} — Omran Jamal`}
    pageDescription={post.data['short-description'] ?? post.data.title}
>
    <Fragment slot="head">
        <meta name="og:type" content="article" />
        <meta name="article:author" content="https://omranjamal.me" />
        <meta
            name="article:published_time"
            content={post.data.published.toISOString()}
        />
        <meta
            name="article:modified_time"
            content={post.data.edited.toISOString()}
        />
        {post.data.tags.map((tag) => <meta name="article:tag" content={tag} />)}
    </Fragment>

    <Fragment slot="og-image">
        <!-- <meta name="og:image" content={imageURL} /> -->
    </Fragment>

    <article itemscope itemtype="http://schema.org/Article">
        <div class="mt-24 flex flex-row">
            <time
                itemprop="datePublished"
                datetime={post.data.published.toISOString()}
                class="hidden md:block text-lg uppercase pl-6 mb-2 text-gray-500 font-jetbrains-mono"
            >
                <HumanTime time={post.data.published} client:idle /> —
            </time>

            <time
                itemprop="dateModified"
                datetime={post.data.edited.toISOString()}
                class="block text-lg uppercase pl-3 mb-2 text-gray-600 font-jetbrains-mono"
                transition:name={`article-time_${post.id}`}
            >
                Edited <HumanTime time={post.data.edited} client:idle />
            </time>
        </div>

        <div
            class="px-4 text-5xl lg:text-6xl font-black max-w-[85%] mb-6"
            itemprop="headline"
            transition:name={`article-title_${post.id}`}
        >
            {post.data?.['on-page-title-prefix'] + ' ' ?? ''}<h1
                class="inline break-words hyphens-auto"
            >
                <Fragment set:html={post.data.title} />
            </h1>
        </div>

        <main class="flex flex-col mx-4">
            <aside class="w-full flex flex-row mb-6">
                <div
                    itemprop="author publisher"
                    itemscope
                    itemtype="http://schema.org/Person"
                >
                    <div class="flex flex-row items-center flex-1">
                        <img
                            class="w-12 border-4 border-blue-100 h-12 rounded-full"
                            src="/images/me.jpeg"
                            alt="Omran Jamal"
                            itemprop="image"
                        />
                        <div class="font-semibold mx-2" itemprop="name">
                            <span itemprop="givenName">Omran</span>
                            <span itemprop="familyName">Jamal</span>
                        </div>
                    </div>
                </div>
            </aside>

            <section class="w-full text-lg lg:w-3/4 font-inter">
                {
                    contentsEnabled ? (
                        <details open={contentsOpenByDefault}>
                            <summary class="text-3xl text-4xl font-black font-jetbrains-mono cursor-pointer">
                                <h2 class="inline">Contents</h2>
                            </summary>

                            <div class="my-10">
                                {headings.map((heading) => (
                                    <div
                                        style={{
                                            paddingLeft: `${2 * (heading.depth - 2)}rem`,
                                        }}
                                        class="py-1">
                                        <a
                                            href={`#${heading.slug}`}
                                            class="font-semibold hover:text-pink-600 transition-all">
                                            ・ {heading.text}
                                        </a>
                                    </div>
                                ))}
                            </div>
                        </details>
                    ) : null
                }

                <div class="post" itemprop="articleBody">
                    <Content
                        components={{
                            h2: H2Tag,
                            h3: H3Tag,
                            h4: H4Tag,
                            h5: H5Tag,
                            h6: H6Tag,
                        }}
                    />
                </div>
            </section>
        </main>

        <div class="text-lg pl-6 text-gray-400 space-x-4 mt-12 mb-6">
            {
                post.data.tags.map((tag) => (
                    <a href={`/tag/${tag}`} class="text-gray-600">
                        #{tag}
                    </a>
                ))
            }
        </div>

        <script>
            document
                .querySelectorAll('.post > h2,h3,h4,h5,h6')
                .forEach((heading) => {
                    heading
                        .querySelectorAll('a.copy-hash-link-button')
                        .forEach((button: HTMLAnchorElement) => {
                            button.addEventListener('click', () => {
                                navigator.clipboard.writeText(button.href);
                            });
                        });
                });
        </script>
    </article>
</Layout>
